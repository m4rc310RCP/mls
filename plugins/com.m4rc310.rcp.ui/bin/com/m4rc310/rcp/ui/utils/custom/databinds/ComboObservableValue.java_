package com.m4rc310.rcp.ui.utils.custom.databinds;

import org.eclipse.core.databinding.observable.Diffs;
import org.eclipse.jface.viewers.ComboViewer;
import org.eclipse.jface.viewers.ISelectionChangedListener;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.SelectionChangedEvent;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.widgets.Display;

public class ComboObservableValue extends MAbstractObservableValue<Object> implements ISelectionChangedListener {

	private final ComboViewer comboViewer;

	private Object oldValue;
	
	private boolean init = false;

	public ComboObservableValue(ComboViewer comboViewer) {
		this.comboViewer = comboViewer;
		if (!comboViewer.getCombo().isDisposed()) {
			if(!init) {
				this.comboViewer.addSelectionChangedListener(this);
				init = true;
			}
		}
	}

	@Override
	public Object getValueType() {
		if (oldValue != null) {
			return oldValue.getClass();
		}
		return Object.class;
	}

	@Override
	protected Object doGetValue() {
		if (!comboViewer.getCombo().isDisposed()) {
			StructuredSelection selection = (StructuredSelection) comboViewer.getSelection();
			return selection.getFirstElement();
		}
		return null;
	}

	@Override
	protected void doSetValue(Object value) {
		if (!comboViewer.getCombo().isDisposed()) {
			
			
			Display.getDefault().syncExec(() -> {
				
				comboViewer.setInput(value);
				
				if (value != null) {
					StructuredSelection ss = new StructuredSelection(value);
					comboViewer.setSelection(ss, true);
				} else {
					comboViewer.setSelection(new StructuredSelection());
				}
			});
			
		}

	}

	@Override
	public synchronized void dispose() {
		comboViewer.removeSelectionChangedListener(this);
		super.dispose();
	}

	@Override
	public void selectionChanged(SelectionChangedEvent event) {
		
		IStructuredSelection sts = (IStructuredSelection) event.getSelection();
		Object newValue = sts.getFirstElement();
		if (newValue != null) {
			if (!newValue.equals(oldValue)) {
				fireValueChange(Diffs.createValueDiff(oldValue, newValue));
				oldValue = newValue;
			}
		}
	}

}
